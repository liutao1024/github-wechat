<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-4.1.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">
	<!-- 加载Hibernat数据库配置文件 在spring容器中只有存在一个实例不能分别加载 -->
	<!-- <context:property-placeholder location="classpath:jdbc.hibernat.properties" /> -->
	<!-- 配置数据源 c3p0 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${hibernat.jdbc.driver}" />
		<property name="jdbcUrl" value="${hibernat.jdbc.url}" />
		<property name="user" value="${hibernat.jdbc.username}" />
		<property name="password" value="${hibernat.jdbc.password}" />

		<!-- 请求超时时间 -->
		<property name="checkoutTimeout" value="30000" />
		<!-- 每60秒检查所有连接池中的空闲连接.默认值: 0,不检查 -->
		<property name="idleConnectionTestPeriod" value="30" />
		<!-- 连接数据库连接池最大空闲时间 -->
		<property name="maxIdleTime" value="30" />
		<!-- 连接池初始化连接数 -->
		<property name="initialPoolSize" value="5" />
		<property name="minPoolSize" value="5" />
		<property name="maxPoolSize" value="20" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数.默认值: 3 -->
		<property name="acquireIncrement" value="5" />
	</bean>

	<!-- 配置hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 注入数据源 相关信息看源码 -->
		<property name="dataSource" ref="dataSource" />
		<!-- hibernate配置信息 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop><!-- 指定Hibernate的连接方言 -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop><!-- 配置启动应用时,是否根据Hibernate映射自动创建数据表 -->

				<!-- 开启二级缓存 ehcache -->
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path}</prop>
			</props>
		</property>
		<!-- 扫描hibernate注解配置的entity -->
		<property name="packagesToScan" value="org.spring.mvc.wechat.entity" />
											   <!-- cn.spring.mvn.core.*.entity, core部分不进hibernat-->
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务增强处理Bean,指定事务管理器 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<!-- 配置详细事务处理语义 -->
		<tx:attributes>
			<!-- 这些配置的说明文档:https://blog.csdn.net/rong_wz/article/details/53787648
			 简要说明:*为通配符,前缀表示以此开头,REQUIRED-代表支持当前事务,若无这新建...
			 -->
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="saveOrUpdate*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="init*" propagation="REQUIRED" />
			<tx:method name="getNext*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="load*" propagation="SUPPORTS" read-only="true" />
			
			<!-- 其他采用默认事务方式 -->
			<tx:method name="*" />

		</tx:attributes>
	</tx:advice>
	<!-- Spring aop事务管理 -->
	<aop:config>
		<!-- 配置切入点 -->
		<!-- 第一个*代表所有的返回值类型;第二个*代表所有的类;第三个*代表类所有方法;..代表子或者孙子包;最后一个..代表所有的参数 -->
		<aop:pointcut id="transactionPointcut" expression="execution(* org.spring.mvc..*Impl.*(..))" />
					<!-- 对expression值的说明 : 路径下需要包含所有service和dao包
											   因为他们的实现(impl)下需要获取事务处理(sessionFactory)变量
											   由于不知道怎么配置多个源就只有这样配置,但是感觉说会不会对性能有影响呢一下扫描那么多的文件
											  这些impl包下的东西都是需要访问数据库的注册成事务,又便于事务提交的  -->
		<!-- 指定在txAdvice切入点应用txAdvice事务增强处理 -->
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut" /> 
		<!-- <aop:advisor advice-ref="transactionAdvice" pointcut-ref="execution cn.spring.mvn.web.entity.service..*Impl.*(..))"/> -->
	</aop:config>
</beans>